#name: Hello World
#on: [push]
#jobs:
#  Hello-World-Job:
#    runs-on:
#      - self-hosted
#      #- codebuild-WeatherAPICodeBuildProject-${{ github.run_id }}-${{ github.run_attempt }}
#    steps:
#      - run: echo "Hello World"

name: Deploying to EC2 AWS

on:
  workflow_dispatch:
  push:
    branches:
      - master

env: 
# set apppool and site name from IIS
  AppPoolName : DefaultAppPool
  SiteName  : 'Default Web Site'
  SitePublishName  :  'DefaultWebSite'
# set to site files.  In this case, the part of the path after f:/websites/
  SitePath :  MainWebsite

#  #TEST_DOTNET_VERSION: "8.0.x"

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: "Mostrar mensaje"
        run: echo "Checkout repo"
    
      - uses: actions/checkout@v4 

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Specify the desired .NET SDK version
        
      - name: Build
        run: dotnet build --configuration Release .\WeatherAPI
      - name: dotnet publish 
        run: | 
          dotnet publish -c Release -o WeatherAPI .\WeatherAPI

      - name: Install AWS CLI (Manual)
        run: |
          Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
          msiexec /i AWSCLIV2.msi /quiet /norestart      
          
      - name: copy files to S3
        run: |
          aws s3 cp ./WeatherAPI/* s3://myrunnerbucket-040925/AppVersions/

#      #- name: Deploy to IIS
#      #  run: |
#      #    iisreset /stop
#      #    Copy-Item ./WeatherAPI/* C:/inetpub/wwwroot/WeatherAPI -Recurse -Force
#      #    iisreset /start


#      #- name: Look for app_offline add as needed
#      #  run: |
#      #    try{Get-Item C:/inetpub/wwwroot/${{env.SitePath}}/app_offline.htm}
#      #    catch{
#      #      Copy-Item C:/inetpub/wwwroot/Offline/app_offline.htm C:/inetpub/wwwroot/${{env.SitePath}} -Recurse -Force  
#      #    }











